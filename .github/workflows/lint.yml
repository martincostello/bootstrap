name: lint

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions: {}

env:
  FORCE_COLOR: 3
  TERM: xterm

jobs:
  lint:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:

    - name: Checkout code
      uses: actions/checkout@v5
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint:1.7.7
      with:
        args: -color

    - name: Lint PowerShell in workflows
      uses: martincostello/lint-actions-powershell@v1
      with:
        settings-path: 'ScriptAnalyzerProfile.ps1'
        treat-warnings-as-errors: true

    - name: Lint PowerShell
      shell: pwsh
      run: |
        $settings = Join-Path -Path ${env:GITHUB_WORKSPACE} "ScriptAnalyzerProfile.ps1"
        $settings = Join-Path -Path ${env:GITHUB_WORKSPACE} 'ScriptAnalyzerProfile.ps1'
        $issues = Invoke-ScriptAnalyzer -Path ${env:GITHUB_WORKSPACE} -Recurse -ReportSummary -Settings $settings
        foreach ($issue in $issues) {
          $severity = $issue.Severity.ToString()
          $level = $severity.Contains("Error") ? "error" : $severity.Contains("Warning") ? "warning" : "notice"
          Write-Output "::${level} file=$($issue.ScriptName),line=$($issue.Line),title=PSScriptAnalyzer::$($issue.Message)"
        }
        if ($issues.Count -gt 0) {
          exit 1
        }

    - name: Lint markdown
      uses: DavidAnson/markdownlint-cli2-action@v20
      with:
        config: .markdownlint.json
        globs: |
          **/*.md
